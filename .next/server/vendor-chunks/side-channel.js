"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/side-channel";
exports.ids = ["vendor-chunks/side-channel"];
exports.modules = {

/***/ "(action-browser)/./node_modules/side-channel/index.js":
/*!********************************************!*\
  !*** ./node_modules/side-channel/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"(action-browser)/./node_modules/get-intrinsic/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"(action-browser)/./node_modules/call-bind/callBound.js\");\nvar inspect = __webpack_require__(/*! object-inspect */ \"(action-browser)/./node_modules/object-inspect/index.js\");\nvar $TypeError = __webpack_require__(/*! es-errors/type */ \"(action-browser)/./node_modules/es-errors/type.js\");\nvar $WeakMap = GetIntrinsic(\"%WeakMap%\", true);\nvar $Map = GetIntrinsic(\"%Map%\", true);\nvar $weakMapGet = callBound(\"WeakMap.prototype.get\", true);\nvar $weakMapSet = callBound(\"WeakMap.prototype.set\", true);\nvar $weakMapHas = callBound(\"WeakMap.prototype.has\", true);\nvar $mapGet = callBound(\"Map.prototype.get\", true);\nvar $mapSet = callBound(\"Map.prototype.set\", true);\nvar $mapHas = callBound(\"Map.prototype.has\", true);\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.\n*/ /** @type {import('.').listGetNode} */ var listGetNode = function(list, key) {\n    /** @type {typeof list | NonNullable<(typeof list)['next']>} */ var prev = list;\n    /** @type {(typeof list)['next']} */ var curr;\n    for(; (curr = prev.next) !== null; prev = curr){\n        if (curr.key === key) {\n            prev.next = curr.next;\n            // eslint-disable-next-line no-extra-parens\n            curr.next = /** @type {NonNullable<typeof list.next>} */ list.next;\n            list.next = curr; // eslint-disable-line no-param-reassign\n            return curr;\n        }\n    }\n};\n/** @type {import('.').listGet} */ var listGet = function(objects, key) {\n    var node = listGetNode(objects, key);\n    return node && node.value;\n};\n/** @type {import('.').listSet} */ var listSet = function(objects, key, value) {\n    var node = listGetNode(objects, key);\n    if (node) {\n        node.value = value;\n    } else {\n        // Prepend the new node to the beginning of the list\n        objects.next = /** @type {import('.').ListNode<typeof value>} */ {\n            key: key,\n            next: objects.next,\n            value: value\n        };\n    }\n};\n/** @type {import('.').listHas} */ var listHas = function(objects, key) {\n    return !!listGetNode(objects, key);\n};\n/** @type {import('.')} */ module.exports = function getSideChannel() {\n    /** @type {WeakMap<object, unknown>} */ var $wm;\n    /** @type {Map<object, unknown>} */ var $m;\n    /** @type {import('.').RootNode<unknown>} */ var $o;\n    /** @type {import('.').Channel} */ var channel = {\n        assert: function(key) {\n            if (!channel.has(key)) {\n                throw new $TypeError(\"Side channel does not contain \" + inspect(key));\n            }\n        },\n        get: function(key) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if ($wm) {\n                    return $weakMapGet($wm, key);\n                }\n            } else if ($Map) {\n                if ($m) {\n                    return $mapGet($m, key);\n                }\n            } else {\n                if ($o) {\n                    return listGet($o, key);\n                }\n            }\n        },\n        has: function(key) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if ($wm) {\n                    return $weakMapHas($wm, key);\n                }\n            } else if ($Map) {\n                if ($m) {\n                    return $mapHas($m, key);\n                }\n            } else {\n                if ($o) {\n                    return listHas($o, key);\n                }\n            }\n            return false;\n        },\n        set: function(key, value) {\n            if ($WeakMap && key && (typeof key === \"object\" || typeof key === \"function\")) {\n                if (!$wm) {\n                    $wm = new $WeakMap();\n                }\n                $weakMapSet($wm, key, value);\n            } else if ($Map) {\n                if (!$m) {\n                    $m = new $Map();\n                }\n                $mapSet($m, key, value);\n            } else {\n                if (!$o) {\n                    // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n                    $o = {\n                        key: {},\n                        next: null\n                    };\n                }\n                listSet($o, key, value);\n            }\n        }\n    };\n    return channel;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/side-channel/index.js\n");

/***/ })

};
;